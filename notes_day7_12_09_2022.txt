
Aggregation:-has a relationship.


public class Car{
private String registrationNo;
private String model;

}

public class Person {

   private int age;
   private Car car; // Whenever we create a reference of other class in a class, then we say that 
 // The class which is having the object is with has-a relationship with the class whose object you 
 // create in the class. In our case Person is having a car. Person has-a car.

public Person(int age, Car car){
  this.age=age;
  this.car=car;
}

public void setAge(int age){
   this.age=age;
}

public void setCar(Car car){
  this.car=car;
}

public int getAge(){
 return age;
}

public Car getCar(){
 return car;
}

}

public class Tester{
  public static void main(String[] args){
1.  Car car=new Car();
2. car.setRegistrationNumber("WB00129");
3.  car.setModel("xyz");
4.  Person person=new Person(24,car);
  }
}

In line 1 , we created an object of Car by writing new Car() and after that we assigned the 
address of the newly created car object in the reference variable car.
In line 2 we set the details of registration number and line line 3 we set the Model for the car.
In line 4 we created an object of Person and we invoked the parameterized constructor and
initialised the Person with age 24 and passing the object reference of car which we created in line 1.



[Note: In the above case it is an example of has relationship] 
------------------------------------------------------------------------------------------------------





------------------------------------------------------------------------------------------------------
Association:-uses-a relationship. 

public class Appointment{
 
private LocalDate appointmentDate;
private LocalTime appointmentTime;
      

}

public class Address {

private int hno;
private String locality;
private String city;
private String state;
 
}

public class Patient {
private int patientId;
private int age;
private String name;
private Address address; // has-a relationship between Patient and the Address

// In this example Appointment reference is not created as an
// instance variable but it is local to the method makeAppointment
// So here we can say that Patient is not having has a relationship
// with the appointment but Patient uses an appointment object.
public void makeAppointment(Appointment appointment){
System.out.println(appointment.getAppointmentDate());
System.out.println(appointment.getAppointmentTime());
}

public void setAddress(Address address){
 this.address=address;
}
public Address getAddress(){
return address;
}


}
------------------------------------------------------------------------
has-a and uses-a relationship
public class Car{
private String registrationNumber;
  public void setRegistrationNumber(String registrationNumber){
   this.registrationNumber=registrationNumber;
  }
  public String getRegistrationNumber(){
   return registrationNumber;
  }

}

public class Driver{
  
public void drives(Car car){   // uses a relationship
  System.out.println("The driver drives the car with the registration number"+car.getRegistrationNumber());
}

}


public class Owner{

private Car car;
private Driver driver;

public Owner(Car car, Driver driver){
 this.car=car;
 this.owner=owner;
}

}

public class Tester{
public static void main(String args[]){
Car car=new Car();
Driver driver=new Driver();
Owner owner=new Owner(car,driver);
// Owner is having a car and driver both, so need to get a reference
// of driver and car from the owner and the driver will drive the car of
// the owner
car=owner.getCar();
driver=owner.getDriver();
driver.drives(car);
// driver can drive another car which is not related to the owner
Car car2=new Car();  // We created a new object of Car
driver.drives(car2);  // Driver object is not created but driver
// object is retrieved from owner and that driver drives a new
// car.


}
}

------------------------------------------------------------------------------------------------------
Writer is having a favorite Pen and writer writes in a piece of paper.
Paper is having a paragraph.
public class Paper{
  private String paragraph;



// constructor/setter/getter
}
public class Writer {
private Pen pen;
// constructor/setter/getter
public void writeAParagraph(Paper paper){
String content=pen.writes();
paper.setParagraph(content);
}
}
public class Pen    {
public String writes(){
  return "Welcome to the code, Object oriented programming is very
          interesting.";
}
draws(){}
}
public class Tester {
   public static void main(String[] args){
    Paper paper=new Paper();
    System.out.println(paper.getParagraph()); //null
    // dont show us null but display an empty string   
   // When the writer writes on the paper , then it should display
   // Welcome to the code, Object oriented programming is very
   // interesting.
   }
 }





 

------------------------------------------------------------------------------------------------------------------------------------

Student is having address and Student is writing a Test and Test is having testId, subjectName, maxMarks. Student is having roll and name also.
[ Hint: Student is having has-a relationship with Address and it will have uses relationship with Test]
public class Address{
private int hNo;
private String locality;
private String city;

public Address(int hNo, String locality, String city){
 this.hNo=hNo;
 this.locality=locality;
 this.city=city;
}

// setters/getters


}
public class Test{
private int testId;
private String subject;
private int maxMarks;

public Test(int testId, String subject, int maxMarks){
  this.testId=testId;
  this.subject=subject;
  this.maxMarks=maxMarks;
}

// setters/getters

}
public class Student{
private int roll;
private String name;
private Address address; // HAS-A

public Student(int roll, String name, Address address){
this.roll=roll;
this.name=name;
this.address=address;
}

// setters/getters

public void writing(Test test){  // USES 
  System.out.println(test.getTestId());
  System.out.println(test.getSubject());
  System.out.println(test.getMaxMarks());
}

}


public class Tester{
 
 public static void main(String[] args){

 Test test=new Test(111,"Computer Sc",100);
 Address address=new Address(1,"Gandhi Marg","Agra");
 Student student=new Student(1,"Santosh",address);
 System.out.println(student.getRoll()); //1
 System.out.println(student.getName());  //Santosh
 address=student.getAddress();
 System.out.println(address.getHno()); //1
 System.out.println(address.getLocality()); //Gandhi Marg
 student.writing(test); // testId    111
                           subjectName  Computer Sc
                           maxMarks;     100
 }
}
 
 
------------------------------------------------------------------------------------------------

A Person is having age name and Address and the person is given a Form. In the 
form we need to enter the name, we need to have address and the person has to fill his
hobbies[].
public class Form {
private int id;
private String name;
private Address address;
private String hobbies[];
// setters/getters
}
public class Address{}
public class Person{
 private int age;
 private String name;
 private Address address;
 public Form fillForm(Form form){
   String hobbies[]={"Singing","Surfing"};
   // Fill up the form and return the form object.
 }
constructors/setters/getters
}
public class FormMain{
   public static void main(String args[]){
    Form form=new Form(); // So default constructor is invoked
    Address address=new Address();
    address.setHno(111);
    address.setLocality();
    address.setCity();
    Person person=new Person(23,"Ashok,address);
    person.fillForm(form);
    System.out.println(form.getId());
    System.out.println(form.getName());
 
   }
}
-------------------------------------------------------------------------------------------------------------------------
I need to keep a track of Managers and Clerks.


public class Manager {
  private int id;
  private String name;
  private int yrsOfExperience;

}

public class Clerk {
  private int id;
  private String name;
  private int typingSpeed;
}
[ In both the above classes we are repeating the attributes id and name. Let us write the code so that we dont have to repeat
id and name in each of the above classes. How it can be done? It can be achieved through the concept od Inheritence]

We can make classes being sub-class of another class. 

// Employee will be Parent,Base,Super class
public class Employee{
 protected int id;
 protected String name;
// So declaring a member as protected, the can be accessed by the sub-classes. Those subclasses
// can be in the same package or different sub-packages. 


}

public class Manager extends Employee{
private int yrsOfExperience;
}
public class Clerk extends Employee{}
private int typingSpeed;
}


[ Whenever we are designing the classes with Parent-Child relationship it is called as
IS-A relationship or Inheritence. In the base class or parent class we keep the attributes
which can be inherited by the subclasses and subclasses contain the attributes which are
specfic to the sub-classes].

------------------------------------------------------------

public class Parent {
private int i;

}

public class Child extends Parent {

public void display(){
  System.out.println(i); // we will get compilation error as private member of the parent class cannot be accessed by the sub-class.
}
}

--------------------------------------
public class Parent {
  
  public void displayParent(){
   System.out.println("I am the display method of the Parent");

  }
}

public class Child extends Parent{

 public void displayChild(){
  System.out.println("I am the display method of the child class");
 }
}

public class InheritDemo1{
  public static void main(String args[]){
    Child child=new Child();
    child.displayParent();
    child.displayChild();
  }
}
---------------------------------------------------------------------------------------------------------------

Constructors are special method for initialisation of the instance variables and thus initialising objects.

public class Data{

private int num;

public void display(){
 System.out.println(num);
 }

}

public class Main{
   public static void main(String args[]){
     Data data=new Data(); // new Data() is basically responsible for creating a new object
    // and at the same time it is invoking the default constructor. When we dont write our
    // own constructor in the class, a default constructor is provided during the compilation
    // time.
    data.display(); // 0
  }
} 

----------------------------------------------------------------------------------

public class Data{

private int num;

public Data(){
num=20;
}
public Data(int num){
this.num=num;
}

public void display(){
 System.out.println(num);
 }

}

public class Main{
   public static void main(String args[]){
     Data data=new Data(); // new Data() is basically responsible for creating a new object
    // and at the same time it is invoking the default constructor. In this example we wrote our own 
    // parameterless and parameterized constructor
    data.display(); // 20
    Dara data1=new Data(200); 
    data1.display(); //200
  }
} 


--------------------------------------
class Customer {
	public Customer() {
		// 3: Parent constructor will be executed
		System.out.println("Creating a customer...");
		// 4: The flow will go back to the child constructor
	}
}
class RegularCustomer extends Customer {
	public RegularCustomer() {
		// 2: This constructor will then call the parent constructor
		System.out.println("It is a regular customer!");
		// 5: The flow will finally come here
	}
}
public class Tester {
	public static void main(String[] args) {
		RegularCustomer regularCustomer = new RegularCustomer();
		// 1: This line will be executed first and the flow will go to [2]
	}
}

In the above example the default/parameterless constructor of the sub class invokes the default/parameterless 
constructor of the Parent class,

Creating a customer...
It is a regular customer!"

--------------------------------------------------------------------------------------------------------------
So if the parameterized constructor of the sub class in not invoking the parameterized constructor of super/parent class,
then the parent class default constructor is called.

package com.infosys.demos.inheritence.parameterized.demo1;
class Customer {
	private String customerId;
	private String customerName;
	public Customer(String customerId, String customerName) {
		this.customerId = customerId;
		this.customerName = customerName;
	}
	public Customer() {
		System.out.println("Parent Default Constructor");
	}
	public String getCustomerId() {
		return customerId;
	}
	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***************************");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println();
	}
}


package com.infosys.demos.inheritence.parameterized.demo1;
class RegularCustomer extends Customer {
	private float discount;
	public RegularCustomer(String custId, String custName) {
		this.setCustomerId(custId);
		this.setCustomerName(custName);
		this.discount = 5.0f;
		System.out.println("Child Constructor");
	}
	public float getDiscount() {
		return discount;
	}
	public void setDiscount(float discount) {
		this.discount = discount;
	}
}


package com.infosys.demos.inheritence.parameterized.demo1;
public class Tester {
	public static void main(String[] args) {
		RegularCustomer regularCustomer = new RegularCustomer("C1010",
				"Johns Kora");
		regularCustomer.displayCustomerDetails();
	}
}

---------------------------------------------------------------------------------------------------------------------

We want to call the parameterized constructor of the Parent class from 
the sub class parameterized constructor.


package com.infosys.inheritence.parameterized.demo2;
class Customer {
	private String customerId;
	private String customerName;

        public Customer(){
           System.out.println("I am the default constructor of Parent class");
        }
	public Customer(String customerId, String customerName) {
		this.customerId = customerId;
		this.customerName = customerName;
		System.out.println("I am the parameterized constructor of Parent class");
	}
	public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***************************");
		System.out.println("Customer Id : " + this.customerId);
		System.out.println("Customer Name : " + this.customerName);
	}
}
class RegularCustomer extends Customer {
	private float discount;
        public RegularCustomer(){
        super(); // This is implicit and if we dont write this statement , then also the default constructor 
        // will be called.
        System.out.println("I am the default constructor of Child class");
        }

	public RegularCustomer(String custId, String custName) {
		//System.out.println("I am before the constructor call");//Constructor call must be the first statement in a constructor
		super(custId, custName); // Invoking the parent class parameterized constructor and this has to be first line
		this.discount = 5.0f;
		System.out.println("I am the parameterized constructor of the child class");
	}
	public float getDiscount() {
		return discount;
	}
	public void setDiscount(float discount) {
		this.discount = discount;
	}
}
public class Tester {
	public static void main(String[] args) {
		RegularCustomer regularCustomer = new RegularCustomer("C1010", "Johns Kora");
		regularCustomer.displayCustomerDetails();
                RegularCustomer regularCustomer2=new RegularCustomer();
	}
}
[ In the above example we have created objects of the Child class with the help of default and parameterized constructor.
If we want to invoke from parameterized constructor of the Child class , the parameterized constructor of parent,
we have to make use of super keyword in constructor call super(custId, custName); . If we are not doing so ,
it will try to call the default constructor of the base class.
But if we create the object of the sub class with default constructor, then the default constructor of the sub class
implicitly call the default constructor of the Parent class.]
-------------------------------------------------------------------------------------------------


